func convert(b byte) int{
    if b == '.'{
        return 0
    }
    v, _ := strconv.Atoi(string(b))
    return v
}

func solveSudoku(board [][]byte) {
    poin := [9][10]bool{}
    coin := [9][10]bool{}
    doin := [9][10]bool{}
    toin := make([][]int, 0)
    b := [9][9]int{}

    for i:=0; i<9; i++ {
        for j:=0; j<9; j++{
            b[i][j] = convert(board[i][j])
            if b[i][j] == 0 {
                toin = append(toin, []int{i, j})
                continue
            }
            poin[i][b[i][j]] = true
            coin[j][b[i][j]] = true
            doin[i/3*3 + j/3][b[i][j]]=true
        }
    }
    m := len(toin)
    var dfs func(int) bool
    dfs = func(step int) bool{
        if step == m{
            for i:=0; i<9; i++ {
                for j:=0; j<9; j++{
                    board[i][j] = fmt.Sprint(b[i][j])[0]
                }
            }
            return true
        }
        x, y := toin[step][0], toin[step][1]
        for i:=1; i<10; i++ {
            if !poin[x][i] && !coin[y][i] && !doin[x/3*3 + y/3][i] {
                b[x][y] = i
                poin[x][i], coin[y][i], doin[x/3*3 + y/3][i] = true, true, true
                if dfs(step+1){
                    return true
                }
                poin[x][i], coin[y][i], doin[x/3*3 + y/3][i] = false, false, false
            }
        }
        return false
    }
    dfs(0)
}
